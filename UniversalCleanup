#!/usr/bin/env bash

set -e
trap 'echo "An error occurred. Exiting..." >&2; exit 1' ERR

if [ "$SUDO_USER" ]; then
  REAL_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)
else
  REAL_HOME=$HOME
fi

LOG_FILE="$REAL_HOME/update.log"
THUMBNAILS_DIR="$REAL_HOME/.thumbnails/normal"
CACHE_DIR="$REAL_HOME/.cache"
SLEEP_TIME=1

[[ $EUID -eq 0 ]] || {
  echo "You have to run as Superuser!" >&2
  exit 1
}

log_message() {
  echo "----------[ $(whoami) $(date) ]---------- $1" >>"${LOG_FILE}"
}

clean_directory() {
  local dir=$1
  [[ -n "$dir" && -d "$dir" ]] || {
    echo "Directory ${dir} not found, skipping."
    return
  }
  echo "Cleaning $dir..."
  find "${dir}" -mindepth 1 -exec rm -rf {} + 2>/dev/null
  du -sh "${dir}"
  sleep "${SLEEP_TIME}"
}

yum_operations() {
if ! command -v yum &> /dev/null; then
    echo "Neither yum is Installed!"
else
    read -p "Are you sure you want to clear the yum cache? (y/n): " confirm

    if [[ $confirm =~ ^[Yy]$ ]]; then
        echo "Clearing yum cache..."
        sudo rm -rf /var/cache/yum/*
    else
        echo "Skipping yum cache cleanup."
    fi

    sudo snap list --all | awk '/disabled/ { print $1, $3 }' | while read snap revision; do
         sudo snap remove "$snap" --revision="$revision"
    done
    rm -rf /var/cache/yum/*
fi
}

nix_operations() {
if ! command -v nix &> /dev/null; then
  echo "Neither nix is Installed!"
else
  nix-env -iA nixpkgs.nix
  nix-env -u '*'
  nix-collect-garbage -d
  nix-store --gc
  nix-env --delete-generations old
fi
}

dnf_operations() {
    if ! command -v dnf &> /dev/null; then
        echo "dnf is not installed!"
    else
        log_message "Starting DNF operations"
        echo 'Cleaning local repository of packages...'
        dnf autoremove -y
        dnf clean all -y
    fi
}

flatpak_operations() {
    if ! command -v flatpak &> /dev/null; then
        echo "flatpak is not installed!"
    else
        log_message "Starting DNF operations"
        echo 'Cleaning local repository of packages...'
        flatpak uninstall --unused
        dnf clean all -y
    fi
}

apt_operations() {
    if ! command -v apt &> /dev/null && ! command -v apt-get &> /dev/null; then
        echo "Neither apt nor apt-get is installed!"
    else
        log_message "Starting APT operations"
        echo 'Cleaning local repository of packages...'

        # Clean package cache using both apt and apt-get
        apt clean -y
        apt-get clean -y

        # Optional: You can run autoclean, but it's typically not necessary after clean
        apt autoclean -y
        apt-get autoclean -y
    fi
}

remove_old_kernels() {
if ! command -v apt &> /dev/null && ! command -v apt-get &> /dev/null; then
    echo "Neither apt is installed!"
else
    echo 'Removing old kernels...'
    apt autoremove --purge -y
    apt-get autoremove --purge -y
fi

}

remove_old_configs() {
  for cmd in dpkg grep awk xargs; do
      if ! command -v "$cmd" &> /dev/null; then
          echo "$cmd Is Missing"
      else
          echo 'Removing old configuration files...'
          dpkg -l | grep '^rc' | awk '{print $2}' | xargs -r dpkg --purge
          sudo dpkg --purge $(dpkg --list | grep '^rc' | awk '{print $2}')
      fi
  done
}

clean_docker() {
  if ! command -v "docker" &> /dev/null; then
      echo "docker Is Missing"
  else
      echo 'Cleaning Docker...'
      docker system prune -a -f --volumes
  fi
}

clean_journal() {
  if ! command -v "journalctl" &> /dev/null; then
      echo "journalctl Is Missing"
  else
    echo 'Cleaning journal logs...'
    journalctl --vacuum-size=50M
  fi
}

clean_systemd_resolved() {
  if ! command -v "systemctl" &> /dev/null; then
      echo "systemctl Is Missing"
  else
    echo 'Cleaning systemd-resolved cache...'
    rm -rf /var/cache/systemd/resolved
    systemctl restart systemd-resolved
  fi
}

clean_snaps() {
  if ! command -v "snap" &> /dev/null; then
      echo "snap Is Missing"
  else
    echo 'Remove old snaps...'
    set -eu
    snap list --all | awk '/disabled/{print $1, $3}' |
        while read snapname revision; do
            sudo snap remove "$snapname" --revision="$revision"
        done
  fi
}

universal_update() {
    echo "Starting system update process..."

    # Update for APT-based systems
    if command -v apt &> /dev/null; then
        echo "APT package manager detected."
        sudo apt update -y && sudo apt full-upgrade -y
        if [ $? -ne 0 ]; then
            echo -e "\e[31mE: APT update/upgrade failed.\e[0m" >&2
            exit 1
        fi

    # Update for DNF-based systems
    elif command -v dnf &> /dev/null; then
        echo "DNF package manager detected."
        sudo dnf update -y
        sudo dnf upgrade -y
        if [ $? -ne 0 ]; then
            echo -e "\e[31mE: DNF update failed.\e[0m" >&2
            exit 1
        fi

    # Update for YUM-based systems
    elif command -v yum &> /dev/null; then
        echo "YUM package manager detected."
        sudo yum update -y
        sudo yum update --security -y
        sudo yum upgrade -y
        if [ $? -ne 0 ]; then
            echo -e "\e[31mE: YUM update failed.\e[0m" >&2
            exit 1
        fi

    # Update for Snap-based systems
    elif command -v snap &> /dev/null; then
        echo "Snap package manager detected."
        sudo snap refresh
        if [ $? -ne 0 ]; then
            echo -e "\e[31mE: Snap update failed.\e[0m" >&2
            exit 1
        fi

    # Update for Nix-based systems
    elif command -v nix-channel &> /dev/null; then
        echo "Nix package manager detected."
        sudo nix-channel --update
        if [ $? -ne 0 ]; then
            echo -e "\e[31mE: Nix update failed.\e[0m" >&2
            exit 1
        fi

    # Update for Flatpak-based systems
    elif command -v flatpak &> /dev/null; then
        echo "Flatpak package manager detected."
        sudo flatpak update -y
        if [ $? -ne 0 ]; then
            echo -e "\e[31mE: Flatpak update failed.\e[0m" >&2
            exit 1
        fi

    else
        echo -e "\e[31mE: No Supported Package Manager Found.\e[0m" >&2
        exit 1
    fi

    echo "System update completed successfully."
}



update_system() {
  universal_update
  apt_operations
  flatpak_operations
  dnf_operations
  yum_operations
  nix_operations
  remove_old_kernels
  remove_old_configs
  clean_snaps

  clean_directory "${THUMBNAILS_DIR}"
  clean_directory "$REAL_HOME/.cache/thumbnails/normal"
  clean_directory "$REAL_HOME/.local/share/Trash"

  if ! pgrep -x "chrome" >/dev/null; then
    clean_directory "${CACHE_DIR}"
  else
    echo "Google Chrome is running; skipping cache cleanup."
  fi

  clean_directory "/var/cache/apt/archives"
  clean_directory "/var/tmp"
  clean_directory "/var/log"
  clean_directory "/var/backups"
  clean_directory "/root/.cache"
  rm -rf /tmp/*

  [[ "$HOME" != "/root" ]] || clean_directory "/root"

  echo 'Fixing broken packages with dpkg...'
  dpkg --configure -a
  echo 'Cleaning old logs...'
  clean_journal
  clean_docker
  clean_systemd_resolved
  df -Th | sort
}

update_system
